{"version":3,"names":["getRelativePathToRNSDK","injectCodeByRegex","FileManagement","injectCIOPodfileCode","iosPath","isFcmPushProvider","blockStart","blockEnd","filename","podfile","read","matches","match","RegExp","lineInPodfileToInjectSnippetBefore","snippetToInjectInPodfile","trim","write","join","console","log","injectCIONotificationPodfileCode","useFrameworks","append"],"sources":["injectCIOPodfileCode.ts"],"sourcesContent":["import type { CustomerIOPluginOptionsIOS } from '../../types/cio-types';\nimport { getRelativePathToRNSDK } from '../constants/ios';\nimport { injectCodeByRegex } from './codeInjection';\nimport { FileManagement } from './fileManagement';\n\nexport async function injectCIOPodfileCode(iosPath: string, isFcmPushProvider: boolean) {\n  const blockStart = '# --- CustomerIO Host App START ---';\n  const blockEnd = '# --- CustomerIO Host App END ---';\n\n  const filename = `${iosPath}/Podfile`;\n  const podfile = await FileManagement.read(filename);\n  const matches = podfile.match(new RegExp(blockStart));\n\n  if (!matches) {\n    // We need to decide what line of code in the Podfile to insert our native code.\n    // The \"post_install\" line is always present in an Expo project Podfile so it's reliable.\n    // Find that line in the Podfile and then we will insert our code above that line.\n    const lineInPodfileToInjectSnippetBefore = /post_install do \\|installer\\|/;\n\n    const snippetToInjectInPodfile = `\n${blockStart}\n  pod 'customerio-reactnative/${isFcmPushProvider ? \"fcm\" : \"apn\"}', :path => '${getRelativePathToRNSDK(\n    iosPath\n  )}'\n${blockEnd}\n`.trim();\n\n    FileManagement.write(\n      filename,\n      injectCodeByRegex(\n        podfile,\n        lineInPodfileToInjectSnippetBefore,\n        snippetToInjectInPodfile\n      ).join('\\n')\n    );\n  } else {\n    console.log('CustomerIO Podfile snippets already exists. Skipping...');\n  }\n}\n\nexport async function injectCIONotificationPodfileCode(\n  iosPath: string,\n  useFrameworks: CustomerIOPluginOptionsIOS['useFrameworks'],\n  isFcmPushProvider: boolean\n) {\n  const filename = `${iosPath}/Podfile`;\n  const podfile = await FileManagement.read(filename);\n\n  const blockStart = '# --- CustomerIO Notification START ---';\n  const blockEnd = '# --- CustomerIO Notification END ---';\n\n  const matches = podfile.match(new RegExp(blockStart));\n\n  if (!matches) {\n    const snippetToInjectInPodfile = `\n${blockStart}\ntarget 'NotificationService' do\n  ${useFrameworks === 'static' ? 'use_frameworks! :linkage => :static' : ''}\n  pod 'customerio-reactnative-richpush/${isFcmPushProvider ? \"fcm\" : \"apn\"}', :path => '${getRelativePathToRNSDK(\n    iosPath\n  )}'\nend\n${blockEnd}\n`.trim();\n\n    FileManagement.append(filename, snippetToInjectInPodfile);\n  }\n}\n"],"mappings":"AACA,SAASA,sBAAsB,QAAQ,kBAAkB;AACzD,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,eAAeC,oBAAoBA,CAACC,OAAe,EAAEC,iBAA0B,EAAE;EACtF,MAAMC,UAAU,GAAG,qCAAqC;EACxD,MAAMC,QAAQ,GAAG,mCAAmC;EAEpD,MAAMC,QAAQ,GAAG,GAAGJ,OAAO,UAAU;EACrC,MAAMK,OAAO,GAAG,MAAMP,cAAc,CAACQ,IAAI,CAACF,QAAQ,CAAC;EACnD,MAAMG,OAAO,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAIC,MAAM,CAACP,UAAU,CAAC,CAAC;EAErD,IAAI,CAACK,OAAO,EAAE;IACZ;IACA;IACA;IACA,MAAMG,kCAAkC,GAAG,+BAA+B;IAE1E,MAAMC,wBAAwB,GAAG;AACrC,EAAET,UAAU;AACZ,gCAAgCD,iBAAiB,GAAG,KAAK,GAAG,KAAK,gBAAgBL,sBAAsB,CACnGI,OACF,CAAC;AACH,EAAEG,QAAQ;AACV,CAAC,CAACS,IAAI,CAAC,CAAC;IAEJd,cAAc,CAACe,KAAK,CAClBT,QAAQ,EACRP,iBAAiB,CACfQ,OAAO,EACPK,kCAAkC,EAClCC,wBACF,CAAC,CAACG,IAAI,CAAC,IAAI,CACb,CAAC;EACH,CAAC,MAAM;IACLC,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;EACxE;AACF;AAEA,OAAO,eAAeC,gCAAgCA,CACpDjB,OAAe,EACfkB,aAA0D,EAC1DjB,iBAA0B,EAC1B;EACA,MAAMG,QAAQ,GAAG,GAAGJ,OAAO,UAAU;EACrC,MAAMK,OAAO,GAAG,MAAMP,cAAc,CAACQ,IAAI,CAACF,QAAQ,CAAC;EAEnD,MAAMF,UAAU,GAAG,yCAAyC;EAC5D,MAAMC,QAAQ,GAAG,uCAAuC;EAExD,MAAMI,OAAO,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAIC,MAAM,CAACP,UAAU,CAAC,CAAC;EAErD,IAAI,CAACK,OAAO,EAAE;IACZ,MAAMI,wBAAwB,GAAG;AACrC,EAAET,UAAU;AACZ;AACA,IAAIgB,aAAa,KAAK,QAAQ,GAAG,qCAAqC,GAAG,EAAE;AAC3E,yCAAyCjB,iBAAiB,GAAG,KAAK,GAAG,KAAK,gBAAgBL,sBAAsB,CAC5GI,OACF,CAAC;AACH;AACA,EAAEG,QAAQ;AACV,CAAC,CAACS,IAAI,CAAC,CAAC;IAEJd,cAAc,CAACqB,MAAM,CAACf,QAAQ,EAAEO,wBAAwB,CAAC;EAC3D;AACF","ignoreList":[]}