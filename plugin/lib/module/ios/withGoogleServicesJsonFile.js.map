{"version":3,"names":["withXcodeProject","IOSConfig","FileManagement","isFcmPushProvider","withGoogleServicesJsonFile","config","cioProps","props","_cioProps$pushNotific","useFcm","console","log","iosPath","modRequest","platformProjectRoot","googleServicesFile","pushNotification","appName","projectName","exists","_config$ios","ios","warn","copyFile","addFileToXcodeProject","modResults","e","error","project","fileName","groupName","filepath","XcodeUtils","ensureGroupRecursively","addResourceFileToGroup","isBuildFile"],"sources":["withGoogleServicesJsonFile.ts"],"sourcesContent":["import {\n  withXcodeProject,\n  IOSConfig,\n  ConfigPlugin,\n} from '@expo/config-plugins';\n\nimport { FileManagement } from './../helpers/utils/fileManagement';\nimport type { CustomerIOPluginOptionsIOS } from '../types/cio-types';\nimport { isFcmPushProvider } from './utils';\n\nexport const withGoogleServicesJsonFile: ConfigPlugin<\n  CustomerIOPluginOptionsIOS\n> = (config, cioProps) => {\n  return withXcodeProject(config, async (props) => {\n    const useFcm = isFcmPushProvider(cioProps);\n    if (!useFcm) {\n      // Nothing to do, for providers other than FCM, the Google services JSON file isn't needed\n      return props;\n    }\n\n    console.log(\n      'Only specify Customer.io ios.pushNotification.googleServicesFile config if you are not already including' +\n        ' GoogleService-Info.plist as part of Firebase integration'\n    );\n\n    // googleServicesFile\n    const iosPath = props.modRequest.platformProjectRoot;\n    const googleServicesFile = cioProps.pushNotification?.googleServicesFile;\n    const appName = props.modRequest.projectName;\n\n    if (FileManagement.exists(`${iosPath}/GoogleService-Info.plist`)) {\n      console.log(\n        `File already exists: ${iosPath}/GoogleService-Info.plist. Skipping...`\n      );\n      return props;\n    }\n\n    if (\n      FileManagement.exists(`${iosPath}/${appName}/GoogleService-Info.plist`)\n    ) {\n      // This is where RN Firebase potentially copies GoogleService-Info.plist\n      // Do not copy if it's already done by Firebase to avoid conflict in Resources\n      console.log(\n        `File already exists: ${iosPath}/${appName}/GoogleService-Info.plist. Skipping...`\n      );\n      return props;\n    }\n\n    if (googleServicesFile && FileManagement.exists(googleServicesFile)) {\n      if (config.ios?.googleServicesFile) {\n        console.warn(\n          'Specifying both Expo ios.googleServicesFile and Customer.io ios.pushNotification.googleServicesFile can cause a conflict' +\n            ' duplicating GoogleService-Info.plist in the iOS project resources. Please remove Customer.io ios.pushNotification.googleServicesFile'\n        );\n      }\n\n      try {\n        FileManagement.copyFile(\n          googleServicesFile,\n          `${iosPath}/GoogleService-Info.plist`\n        );\n\n        addFileToXcodeProject(props.modResults, 'GoogleService-Info.plist');\n      } catch (e) {\n        console.error(\n          `There was an error copying your GoogleService-Info.plist file. You can copy it manually into ${iosPath}/GoogleService-Info.plist`\n        );\n      }\n    } else {\n      console.error(\n        `The Google Services file provided in ${googleServicesFile} doesn't seem to exist. You can copy it manually into ${iosPath}/GoogleService-Info.plist`\n      );\n    }\n\n    return props;\n  });\n};\n\nfunction addFileToXcodeProject(project: any, fileName: string) {\n  const groupName = 'Resources';\n  const filepath = fileName;\n\n  if (!IOSConfig.XcodeUtils.ensureGroupRecursively(project, groupName)) {\n    console.error(\n      `Error copying GoogleService-Info.plist. Failed to find or create '${groupName}' group in Xcode.`\n    );\n    return;\n  }\n\n  // Add GoogleService-Info.plist to the Xcode project\n  IOSConfig.XcodeUtils.addResourceFileToGroup({\n    project,\n    filepath,\n    groupName,\n    isBuildFile: true,\n  });\n}\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,SAAS,QAEJ,sBAAsB;AAE7B,SAASC,cAAc,QAAQ,mCAAmC;AAElE,SAASC,iBAAiB,QAAQ,SAAS;AAE3C,OAAO,MAAMC,0BAEZ,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EACxB,OAAON,gBAAgB,CAACK,MAAM,EAAE,MAAOE,KAAK,IAAK;IAAA,IAAAC,qBAAA;IAC/C,MAAMC,MAAM,GAAGN,iBAAiB,CAACG,QAAQ,CAAC;IAC1C,IAAI,CAACG,MAAM,EAAE;MACX;MACA,OAAOF,KAAK;IACd;IAEAG,OAAO,CAACC,GAAG,CACT,0GAA0G,GACxG,2DACJ,CAAC;;IAED;IACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,UAAU,CAACC,mBAAmB;IACpD,MAAMC,kBAAkB,IAAAP,qBAAA,GAAGF,QAAQ,CAACU,gBAAgB,cAAAR,qBAAA,uBAAzBA,qBAAA,CAA2BO,kBAAkB;IACxE,MAAME,OAAO,GAAGV,KAAK,CAACM,UAAU,CAACK,WAAW;IAE5C,IAAIhB,cAAc,CAACiB,MAAM,CAAC,GAAGP,OAAO,2BAA2B,CAAC,EAAE;MAChEF,OAAO,CAACC,GAAG,CACT,wBAAwBC,OAAO,wCACjC,CAAC;MACD,OAAOL,KAAK;IACd;IAEA,IACEL,cAAc,CAACiB,MAAM,CAAC,GAAGP,OAAO,IAAIK,OAAO,2BAA2B,CAAC,EACvE;MACA;MACA;MACAP,OAAO,CAACC,GAAG,CACT,wBAAwBC,OAAO,IAAIK,OAAO,wCAC5C,CAAC;MACD,OAAOV,KAAK;IACd;IAEA,IAAIQ,kBAAkB,IAAIb,cAAc,CAACiB,MAAM,CAACJ,kBAAkB,CAAC,EAAE;MAAA,IAAAK,WAAA;MACnE,KAAAA,WAAA,GAAIf,MAAM,CAACgB,GAAG,cAAAD,WAAA,eAAVA,WAAA,CAAYL,kBAAkB,EAAE;QAClCL,OAAO,CAACY,IAAI,CACV,0HAA0H,GACxH,uIACJ,CAAC;MACH;MAEA,IAAI;QACFpB,cAAc,CAACqB,QAAQ,CACrBR,kBAAkB,EAClB,GAAGH,OAAO,2BACZ,CAAC;QAEDY,qBAAqB,CAACjB,KAAK,CAACkB,UAAU,EAAE,0BAA0B,CAAC;MACrE,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVhB,OAAO,CAACiB,KAAK,CACX,gGAAgGf,OAAO,2BACzG,CAAC;MACH;IACF,CAAC,MAAM;MACLF,OAAO,CAACiB,KAAK,CACX,wCAAwCZ,kBAAkB,yDAAyDH,OAAO,2BAC5H,CAAC;IACH;IAEA,OAAOL,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AAED,SAASiB,qBAAqBA,CAACI,OAAY,EAAEC,QAAgB,EAAE;EAC7D,MAAMC,SAAS,GAAG,WAAW;EAC7B,MAAMC,QAAQ,GAAGF,QAAQ;EAEzB,IAAI,CAAC5B,SAAS,CAAC+B,UAAU,CAACC,sBAAsB,CAACL,OAAO,EAAEE,SAAS,CAAC,EAAE;IACpEpB,OAAO,CAACiB,KAAK,CACX,qEAAqEG,SAAS,mBAChF,CAAC;IACD;EACF;;EAEA;EACA7B,SAAS,CAAC+B,UAAU,CAACE,sBAAsB,CAAC;IAC1CN,OAAO;IACPG,QAAQ;IACRD,SAAS;IACTK,WAAW,EAAE;EACf,CAAC,CAAC;AACJ","ignoreList":[]}