{"version":3,"names":["_configPlugins","require","_ios","_codeInjection","_injectCIOPodfileCode","_fileManagement","_utils","PLIST_FILENAME","CIO_NOTIFICATION_TARGET_NAME","ENV_FILENAME","TARGETED_DEVICE_FAMILY","addNotificationServiceExtension","options","xcodeProject","_options$pushNotifica","pushNotification","addPushNotificationFile","useRichPush","addRichPushXcodeProj","error","console","withCioNotificationsXcodeProject","configOuter","props","withXcodeProject","config","modRequest","ios","version","bundleShortVersion","appleTeamId","iosDeploymentTarget","useFrameworks","undefined","Error","projectName","platformProjectRoot","bundleIdentifier","buildNumber","bundleVersion","DEFAULT_BUNDLE_VERSION","iosPath","appName","modifiedProjectFile","modResults","exports","isFcmProvider","isFcmPushProvider","injectCIONotificationPodfileCode","pbxTargetByName","warn","nsePath","FileManagement","mkdir","recursive","platformSpecificFiles","commonFiles","getTargetFile","filename","forEach","targetFile","copyFile","LOCAL_PATH_TO_CIO_NSE_FILES","infoPlistTargetFile","updateNseInfoPlist","updateNseEnv","extGroup","addPbxGroup","groups","hash","project","objects","Object","keys","key","name","path","addToPbxGroup","uuid","projObjects","nseTarget","addTarget","addBuildPhase","configurations","pbxXCBuildConfigurationSection","buildSettings","PRODUCT_NAME","buildSettingsObj","DEVELOPMENT_TEAM","IPHONEOS_DEPLOYMENT_TARGET","CODE_SIGN_STYLE","SWIFT_VERSION","addTargetAttribute","payload","BUNDLE_SHORT_VERSION_RE","BUNDLE_VERSION_RE","plistFileString","readFile","replaceCodeByRegex","writeFile","envFileName","_options$pushNotifica2","CDP_API_KEY_RE","REGION_RE","envFileContent","cdpApiKey","region","env","regionMap","us","eu","mappedRegion","toLowerCase","sourceFile","targetFileName","appPath","exists","log","updatePushFile","group","pbxCreateGroup","classesKey","findPBXGroupKey","addSourceFile","_options$pushNotifica3","_options$pushNotifica4","_options$pushNotifica5","_options$pushNotifica6","_options$pushNotifica7","REGISTER_RE","disableNotificationRegistration","snippet","CIO_REGISTER_PUSHNOTIFICATION_SNIPPET","toUpperCase","autoTrackPushEvents","toString","autoFetchDeviceToken","showPushAppInForeground"],"sources":["withNotificationsXcodeProject.js"],"sourcesContent":["import { withXcodeProject, } from '@expo/config-plugins';\nimport { CIO_NOTIFICATION_TARGET_NAME, CIO_REGISTER_PUSHNOTIFICATION_SNIPPET, DEFAULT_BUNDLE_VERSION, LOCAL_PATH_TO_CIO_NSE_FILES, } from '../helpers/constants/ios';\nimport { replaceCodeByRegex } from '../helpers/utils/codeInjection';\nimport { injectCIONotificationPodfileCode } from '../helpers/utils/injectCIOPodfileCode';\nimport { FileManagement } from './../helpers/utils/fileManagement';\nimport { isFcmPushProvider } from './utils';\nconst PLIST_FILENAME = `${CIO_NOTIFICATION_TARGET_NAME}-Info.plist`;\nconst ENV_FILENAME = 'Env.swift';\nconst TARGETED_DEVICE_FAMILY = `\"1,2\"`;\nconst addNotificationServiceExtension = async (options, xcodeProject) => {\n    try {\n        if (options.pushNotification) {\n            await addPushNotificationFile(options, xcodeProject);\n        }\n        if (options.pushNotification?.useRichPush === true) {\n            await addRichPushXcodeProj(options, xcodeProject);\n        }\n        return xcodeProject;\n    }\n    catch (error) {\n        console.error(error);\n        return null;\n    }\n};\nexport const withCioNotificationsXcodeProject = (configOuter, props) => {\n    return withXcodeProject(configOuter, async (config) => {\n        const { modRequest, ios, version: bundleShortVersion } = config;\n        const { appleTeamId, iosDeploymentTarget, useFrameworks } = props;\n        if (ios === undefined)\n            throw new Error('Adding NotificationServiceExtension failed: ios config missing from app.config.js or app.json.');\n        // projectName and platformProjectRoot translates to appName and iosPath in addNotificationServiceExtension()\n        const { projectName, platformProjectRoot } = modRequest;\n        const { bundleIdentifier, buildNumber } = ios;\n        if (bundleShortVersion === undefined) {\n            throw new Error('Adding NotificationServiceExtension failed: version missing from app.config.js or app.json');\n        }\n        if (bundleIdentifier === undefined) {\n            throw new Error('Adding NotificationServiceExtension failed: ios.bundleIdentifier missing from app.config.js or app.json');\n        }\n        if (projectName === undefined) {\n            throw new Error('Adding NotificationServiceExtension failed: name missing from app.config.js or app.json');\n        }\n        const options = {\n            ...props,\n            appleTeamId,\n            bundleIdentifier,\n            bundleShortVersion,\n            bundleVersion: buildNumber || DEFAULT_BUNDLE_VERSION,\n            iosPath: platformProjectRoot,\n            appName: projectName,\n            useFrameworks,\n            iosDeploymentTarget,\n        };\n        const modifiedProjectFile = await addNotificationServiceExtension(options, config.modResults);\n        if (modifiedProjectFile) {\n            config.modResults = modifiedProjectFile;\n        }\n        return config;\n    });\n};\nconst addRichPushXcodeProj = async (options, xcodeProject) => {\n    const { appleTeamId, bundleIdentifier, bundleShortVersion, bundleVersion, iosPath, iosDeploymentTarget, useFrameworks, } = options;\n    const isFcmProvider = isFcmPushProvider(options);\n    await injectCIONotificationPodfileCode(iosPath, useFrameworks, isFcmProvider);\n    // Check if `CIO_NOTIFICATION_TARGET_NAME` group already exist in the project\n    // If true then skip creating a new group to avoid duplicate folders\n    if (xcodeProject.pbxTargetByName(CIO_NOTIFICATION_TARGET_NAME)) {\n        console.warn(`${CIO_NOTIFICATION_TARGET_NAME} already exists in project. Skipping...`);\n        return;\n    }\n    const nsePath = `${iosPath}/${CIO_NOTIFICATION_TARGET_NAME}`;\n    FileManagement.mkdir(nsePath, {\n        recursive: true,\n    });\n    const platformSpecificFiles = ['NotificationService.swift'];\n    const commonFiles = [\n        PLIST_FILENAME,\n        'NotificationService.h',\n        'NotificationService.m',\n        ENV_FILENAME,\n    ];\n    const getTargetFile = (filename) => `${nsePath}/${filename}`;\n    // Copy platform-specific files\n    platformSpecificFiles.forEach((filename) => {\n        const targetFile = getTargetFile(filename);\n        FileManagement.copyFile(`${LOCAL_PATH_TO_CIO_NSE_FILES}/${isFcmProvider ? 'fcm' : 'apn'}/${filename}`, targetFile);\n    });\n    // Copy common files\n    commonFiles.forEach((filename) => {\n        const targetFile = getTargetFile(filename);\n        FileManagement.copyFile(`${LOCAL_PATH_TO_CIO_NSE_FILES}/common/${filename}`, targetFile);\n    });\n    /* MODIFY COPIED EXTENSION FILES */\n    const infoPlistTargetFile = getTargetFile(PLIST_FILENAME);\n    updateNseInfoPlist({\n        bundleVersion,\n        bundleShortVersion,\n        infoPlistTargetFile,\n    });\n    updateNseEnv(options, getTargetFile(ENV_FILENAME));\n    // Create new PBXGroup for the extension\n    const extGroup = xcodeProject.addPbxGroup([...platformSpecificFiles, ...commonFiles], // Combine platform-specific and common files,\n    CIO_NOTIFICATION_TARGET_NAME, CIO_NOTIFICATION_TARGET_NAME);\n    // Add the new PBXGroup to the top level group. This makes the\n    // files / folder appear in the file explorer in Xcode.\n    const groups = xcodeProject.hash.project.objects['PBXGroup'];\n    Object.keys(groups).forEach((key) => {\n        if (groups[key].name === undefined && groups[key].path === undefined) {\n            xcodeProject.addToPbxGroup(extGroup.uuid, key);\n        }\n    });\n    // WORK AROUND for codeProject.addTarget BUG\n    // Xcode projects don't contain these if there is only one target\n    // An upstream fix should be made to the code referenced in this link:\n    //   - https://github.com/apache/cordova-node-xcode/blob/8b98cabc5978359db88dc9ff2d4c015cba40f150/lib/pbxProject.js#L860\n    const projObjects = xcodeProject.hash.project.objects;\n    projObjects['PBXTargetDependency'] = projObjects['PBXTargetDependency'] || {};\n    projObjects['PBXContainerItemProxy'] =\n        projObjects['PBXTargetDependency'] || {};\n    if (xcodeProject.pbxTargetByName(CIO_NOTIFICATION_TARGET_NAME)) {\n        console.warn(`${CIO_NOTIFICATION_TARGET_NAME} already exists in project. Skipping...`);\n        return;\n    }\n    // Add the NSE target\n    // This also adds PBXTargetDependency and PBXContainerItemProxy\n    const nseTarget = xcodeProject.addTarget(CIO_NOTIFICATION_TARGET_NAME, 'app_extension', CIO_NOTIFICATION_TARGET_NAME, `${bundleIdentifier}.richpush`);\n    // Add build phases to the new target\n    xcodeProject.addBuildPhase(['NotificationService.m', 'NotificationService.swift', 'Env.swift'], 'PBXSourcesBuildPhase', 'Sources', nseTarget.uuid);\n    xcodeProject.addBuildPhase([], 'PBXResourcesBuildPhase', 'Resources', nseTarget.uuid);\n    xcodeProject.addBuildPhase([], 'PBXFrameworksBuildPhase', 'Frameworks', nseTarget.uuid);\n    // Edit the Deployment info of the target\n    const configurations = xcodeProject.pbxXCBuildConfigurationSection();\n    for (const key in configurations) {\n        if (typeof configurations[key].buildSettings !== 'undefined' &&\n            configurations[key].buildSettings.PRODUCT_NAME ===\n                `\"${CIO_NOTIFICATION_TARGET_NAME}\"`) {\n            const buildSettingsObj = configurations[key].buildSettings;\n            buildSettingsObj.DEVELOPMENT_TEAM = appleTeamId;\n            buildSettingsObj.IPHONEOS_DEPLOYMENT_TARGET =\n                iosDeploymentTarget || '15.1';\n            buildSettingsObj.TARGETED_DEVICE_FAMILY = TARGETED_DEVICE_FAMILY;\n            buildSettingsObj.CODE_SIGN_STYLE = 'Automatic';\n            buildSettingsObj.SWIFT_VERSION = 4.2;\n        }\n    }\n    // Add development team to the target & the main\n    xcodeProject.addTargetAttribute('DevelopmentTeam', appleTeamId, nseTarget);\n    xcodeProject.addTargetAttribute('DevelopmentTeam', appleTeamId);\n};\nconst updateNseInfoPlist = (payload) => {\n    const BUNDLE_SHORT_VERSION_RE = /\\{\\{BUNDLE_SHORT_VERSION\\}\\}/;\n    const BUNDLE_VERSION_RE = /\\{\\{BUNDLE_VERSION\\}\\}/;\n    let plistFileString = FileManagement.readFile(payload.infoPlistTargetFile);\n    if (payload.bundleVersion) {\n        plistFileString = replaceCodeByRegex(plistFileString, BUNDLE_VERSION_RE, payload.bundleVersion);\n    }\n    if (payload.bundleShortVersion) {\n        plistFileString = replaceCodeByRegex(plistFileString, BUNDLE_SHORT_VERSION_RE, payload.bundleShortVersion);\n    }\n    FileManagement.writeFile(payload.infoPlistTargetFile, plistFileString);\n};\nconst updateNseEnv = (options, envFileName) => {\n    const CDP_API_KEY_RE = /\\{\\{CDP_API_KEY\\}\\}/;\n    const REGION_RE = /\\{\\{REGION\\}\\}/;\n    let envFileContent = FileManagement.readFile(envFileName);\n    const { cdpApiKey, region } = options.pushNotification?.env || {\n        cdpApiKey: undefined,\n        region: undefined,\n    };\n    if (!cdpApiKey) {\n        throw new Error('Adding NotificationServiceExtension failed: ios.pushNotification.env.cdpApiKey is missing from app.config.js or app.json.');\n    }\n    envFileContent = replaceCodeByRegex(envFileContent, CDP_API_KEY_RE, cdpApiKey);\n    if (region) {\n        const regionMap = {\n            us: 'Region.US',\n            eu: 'Region.EU',\n        };\n        const mappedRegion = regionMap[region.toLowerCase()] || '';\n        if (!mappedRegion) {\n            console.warn(`${region} is an invalid region. Please use the values from the docs: https://customer.io/docs/sdk/expo/getting-started/#configure-the-plugin`);\n        }\n        else {\n            envFileContent = replaceCodeByRegex(envFileContent, REGION_RE, mappedRegion);\n        }\n    }\n    FileManagement.writeFile(envFileName, envFileContent);\n};\nasync function addPushNotificationFile(options, xcodeProject) {\n    // Maybe copy a different file with FCM config based on config\n    const { iosPath, appName } = options;\n    const isFcmProvider = isFcmPushProvider(options);\n    // PushService.swift is platform-specific and always lives in the platform folder\n    const sourceFile = `${isFcmProvider ? 'fcm' : 'apn'}/PushService.swift`;\n    const targetFileName = 'PushService.swift';\n    const appPath = `${iosPath}/${appName}`;\n    const getTargetFile = (filename) => `${appPath}/${filename}`;\n    const targetFile = getTargetFile(targetFileName);\n    // Check whether {file} exists in the project. If false, then add the file\n    // If {file} exists then skip and return\n    if (!FileManagement.exists(getTargetFile(targetFileName))) {\n        FileManagement.mkdir(appPath, {\n            recursive: true,\n        });\n        FileManagement.copyFile(`${LOCAL_PATH_TO_CIO_NSE_FILES}/${sourceFile}`, targetFile);\n    }\n    else {\n        console.log(`${getTargetFile(targetFileName)} already exists. Skipping...`);\n        return;\n    }\n    updatePushFile(options, targetFile);\n    const group = xcodeProject.pbxCreateGroup('CustomerIONotifications');\n    const classesKey = xcodeProject.findPBXGroupKey({ name: `${appName}` });\n    xcodeProject.addToPbxGroup(group, classesKey);\n    xcodeProject.addSourceFile(`${appName}/${targetFileName}`, null, group);\n}\nconst updatePushFile = (options, envFileName) => {\n    const REGISTER_RE = /\\{\\{REGISTER_SNIPPET\\}\\}/;\n    let envFileContent = FileManagement.readFile(envFileName);\n    const disableNotificationRegistration = options.pushNotification?.disableNotificationRegistration;\n    const { cdpApiKey, region } = options.pushNotification?.env || {\n        cdpApiKey: undefined,\n        region: undefined,\n    };\n    if (!cdpApiKey) {\n        throw new Error('Adding NotificationServiceExtension failed: ios.pushNotification.env.cdpApiKey is missing from app.config.js or app.json.');\n    }\n    let snippet = '';\n    // unless this property is explicity set to true, push notification\n    // registration will be added to the AppDelegate\n    if (disableNotificationRegistration !== true) {\n        snippet = CIO_REGISTER_PUSHNOTIFICATION_SNIPPET;\n    }\n    envFileContent = replaceCodeByRegex(envFileContent, REGISTER_RE, snippet);\n    envFileContent = replaceCodeByRegex(envFileContent, /\\{\\{CDP_API_KEY\\}\\}/, cdpApiKey);\n    if (region) {\n        envFileContent = replaceCodeByRegex(envFileContent, /\\{\\{REGION\\}\\}/, region.toUpperCase());\n    }\n    const autoTrackPushEvents = options.pushNotification?.autoTrackPushEvents !== false;\n    envFileContent = replaceCodeByRegex(envFileContent, /\\{\\{AUTO_TRACK_PUSH_EVENTS\\}\\}/, autoTrackPushEvents.toString());\n    const autoFetchDeviceToken = options.pushNotification?.autoFetchDeviceToken !== false;\n    envFileContent = replaceCodeByRegex(envFileContent, /\\{\\{AUTO_FETCH_DEVICE_TOKEN\\}\\}/, autoFetchDeviceToken.toString());\n    const showPushAppInForeground = options.pushNotification?.showPushAppInForeground !== false;\n    envFileContent = replaceCodeByRegex(envFileContent, /\\{\\{SHOW_PUSH_APP_IN_FOREGROUND\\}\\}/, showPushAppInForeground.toString());\n    FileManagement.writeFile(envFileName, envFileContent);\n};\n"],"mappings":";;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AACA,IAAAI,eAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AACA,MAAMM,cAAc,GAAG,GAAGC,iCAA4B,aAAa;AACnE,MAAMC,YAAY,GAAG,WAAW;AAChC,MAAMC,sBAAsB,GAAG,OAAO;AACtC,MAAMC,+BAA+B,GAAG,MAAAA,CAAOC,OAAO,EAAEC,YAAY,KAAK;EACrE,IAAI;IAAA,IAAAC,qBAAA;IACA,IAAIF,OAAO,CAACG,gBAAgB,EAAE;MAC1B,MAAMC,uBAAuB,CAACJ,OAAO,EAAEC,YAAY,CAAC;IACxD;IACA,IAAI,EAAAC,qBAAA,GAAAF,OAAO,CAACG,gBAAgB,cAAAD,qBAAA,uBAAxBA,qBAAA,CAA0BG,WAAW,MAAK,IAAI,EAAE;MAChD,MAAMC,oBAAoB,CAACN,OAAO,EAAEC,YAAY,CAAC;IACrD;IACA,OAAOA,YAAY;EACvB,CAAC,CACD,OAAOM,KAAK,EAAE;IACVC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACf;AACJ,CAAC;AACM,MAAME,gCAAgC,GAAGA,CAACC,WAAW,EAAEC,KAAK,KAAK;EACpE,OAAO,IAAAC,+BAAgB,EAACF,WAAW,EAAE,MAAOG,MAAM,IAAK;IACnD,MAAM;MAAEC,UAAU;MAAEC,GAAG;MAAEC,OAAO,EAAEC;IAAmB,CAAC,GAAGJ,MAAM;IAC/D,MAAM;MAAEK,WAAW;MAAEC,mBAAmB;MAAEC;IAAc,CAAC,GAAGT,KAAK;IACjE,IAAII,GAAG,KAAKM,SAAS,EACjB,MAAM,IAAIC,KAAK,CAAC,gGAAgG,CAAC;IACrH;IACA,MAAM;MAAEC,WAAW;MAAEC;IAAoB,CAAC,GAAGV,UAAU;IACvD,MAAM;MAAEW,gBAAgB;MAAEC;IAAY,CAAC,GAAGX,GAAG;IAC7C,IAAIE,kBAAkB,KAAKI,SAAS,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,4FAA4F,CAAC;IACjH;IACA,IAAIG,gBAAgB,KAAKJ,SAAS,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,yGAAyG,CAAC;IAC9H;IACA,IAAIC,WAAW,KAAKF,SAAS,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,yFAAyF,CAAC;IAC9G;IACA,MAAMtB,OAAO,GAAG;MACZ,GAAGW,KAAK;MACRO,WAAW;MACXO,gBAAgB;MAChBR,kBAAkB;MAClBU,aAAa,EAAED,WAAW,IAAIE,2BAAsB;MACpDC,OAAO,EAAEL,mBAAmB;MAC5BM,OAAO,EAAEP,WAAW;MACpBH,aAAa;MACbD;IACJ,CAAC;IACD,MAAMY,mBAAmB,GAAG,MAAMhC,+BAA+B,CAACC,OAAO,EAAEa,MAAM,CAACmB,UAAU,CAAC;IAC7F,IAAID,mBAAmB,EAAE;MACrBlB,MAAM,CAACmB,UAAU,GAAGD,mBAAmB;IAC3C;IACA,OAAOlB,MAAM;EACjB,CAAC,CAAC;AACN,CAAC;AAACoB,OAAA,CAAAxB,gCAAA,GAAAA,gCAAA;AACF,MAAMH,oBAAoB,GAAG,MAAAA,CAAON,OAAO,EAAEC,YAAY,KAAK;EAC1D,MAAM;IAAEiB,WAAW;IAAEO,gBAAgB;IAAER,kBAAkB;IAAEU,aAAa;IAAEE,OAAO;IAAEV,mBAAmB;IAAEC;EAAe,CAAC,GAAGpB,OAAO;EAClI,MAAMkC,aAAa,GAAG,IAAAC,wBAAiB,EAACnC,OAAO,CAAC;EAChD,MAAM,IAAAoC,sDAAgC,EAACP,OAAO,EAAET,aAAa,EAAEc,aAAa,CAAC;EAC7E;EACA;EACA,IAAIjC,YAAY,CAACoC,eAAe,CAACzC,iCAA4B,CAAC,EAAE;IAC5DY,OAAO,CAAC8B,IAAI,CAAC,GAAG1C,iCAA4B,yCAAyC,CAAC;IACtF;EACJ;EACA,MAAM2C,OAAO,GAAG,GAAGV,OAAO,IAAIjC,iCAA4B,EAAE;EAC5D4C,8BAAc,CAACC,KAAK,CAACF,OAAO,EAAE;IAC1BG,SAAS,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,qBAAqB,GAAG,CAAC,2BAA2B,CAAC;EAC3D,MAAMC,WAAW,GAAG,CAChBjD,cAAc,EACd,uBAAuB,EACvB,uBAAuB,EACvBE,YAAY,CACf;EACD,MAAMgD,aAAa,GAAIC,QAAQ,IAAK,GAAGP,OAAO,IAAIO,QAAQ,EAAE;EAC5D;EACAH,qBAAqB,CAACI,OAAO,CAAED,QAAQ,IAAK;IACxC,MAAME,UAAU,GAAGH,aAAa,CAACC,QAAQ,CAAC;IAC1CN,8BAAc,CAACS,QAAQ,CAAC,GAAGC,gCAA2B,IAAIhB,aAAa,GAAG,KAAK,GAAG,KAAK,IAAIY,QAAQ,EAAE,EAAEE,UAAU,CAAC;EACtH,CAAC,CAAC;EACF;EACAJ,WAAW,CAACG,OAAO,CAAED,QAAQ,IAAK;IAC9B,MAAME,UAAU,GAAGH,aAAa,CAACC,QAAQ,CAAC;IAC1CN,8BAAc,CAACS,QAAQ,CAAC,GAAGC,gCAA2B,WAAWJ,QAAQ,EAAE,EAAEE,UAAU,CAAC;EAC5F,CAAC,CAAC;EACF;EACA,MAAMG,mBAAmB,GAAGN,aAAa,CAAClD,cAAc,CAAC;EACzDyD,kBAAkB,CAAC;IACfzB,aAAa;IACbV,kBAAkB;IAClBkC;EACJ,CAAC,CAAC;EACFE,YAAY,CAACrD,OAAO,EAAE6C,aAAa,CAAChD,YAAY,CAAC,CAAC;EAClD;EACA,MAAMyD,QAAQ,GAAGrD,YAAY,CAACsD,WAAW,CAAC,CAAC,GAAGZ,qBAAqB,EAAE,GAAGC,WAAW,CAAC;EAAE;EACtFhD,iCAA4B,EAAEA,iCAA4B,CAAC;EAC3D;EACA;EACA,MAAM4D,MAAM,GAAGvD,YAAY,CAACwD,IAAI,CAACC,OAAO,CAACC,OAAO,CAAC,UAAU,CAAC;EAC5DC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACT,OAAO,CAAEe,GAAG,IAAK;IACjC,IAAIN,MAAM,CAACM,GAAG,CAAC,CAACC,IAAI,KAAK1C,SAAS,IAAImC,MAAM,CAACM,GAAG,CAAC,CAACE,IAAI,KAAK3C,SAAS,EAAE;MAClEpB,YAAY,CAACgE,aAAa,CAACX,QAAQ,CAACY,IAAI,EAAEJ,GAAG,CAAC;IAClD;EACJ,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA,MAAMK,WAAW,GAAGlE,YAAY,CAACwD,IAAI,CAACC,OAAO,CAACC,OAAO;EACrDQ,WAAW,CAAC,qBAAqB,CAAC,GAAGA,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;EAC7EA,WAAW,CAAC,uBAAuB,CAAC,GAChCA,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;EAC5C,IAAIlE,YAAY,CAACoC,eAAe,CAACzC,iCAA4B,CAAC,EAAE;IAC5DY,OAAO,CAAC8B,IAAI,CAAC,GAAG1C,iCAA4B,yCAAyC,CAAC;IACtF;EACJ;EACA;EACA;EACA,MAAMwE,SAAS,GAAGnE,YAAY,CAACoE,SAAS,CAACzE,iCAA4B,EAAE,eAAe,EAAEA,iCAA4B,EAAE,GAAG6B,gBAAgB,WAAW,CAAC;EACrJ;EACAxB,YAAY,CAACqE,aAAa,CAAC,CAAC,uBAAuB,EAAE,2BAA2B,EAAE,WAAW,CAAC,EAAE,sBAAsB,EAAE,SAAS,EAAEF,SAAS,CAACF,IAAI,CAAC;EAClJjE,YAAY,CAACqE,aAAa,CAAC,EAAE,EAAE,wBAAwB,EAAE,WAAW,EAAEF,SAAS,CAACF,IAAI,CAAC;EACrFjE,YAAY,CAACqE,aAAa,CAAC,EAAE,EAAE,yBAAyB,EAAE,YAAY,EAAEF,SAAS,CAACF,IAAI,CAAC;EACvF;EACA,MAAMK,cAAc,GAAGtE,YAAY,CAACuE,8BAA8B,CAAC,CAAC;EACpE,KAAK,MAAMV,GAAG,IAAIS,cAAc,EAAE;IAC9B,IAAI,OAAOA,cAAc,CAACT,GAAG,CAAC,CAACW,aAAa,KAAK,WAAW,IACxDF,cAAc,CAACT,GAAG,CAAC,CAACW,aAAa,CAACC,YAAY,KAC1C,IAAI9E,iCAA4B,GAAG,EAAE;MACzC,MAAM+E,gBAAgB,GAAGJ,cAAc,CAACT,GAAG,CAAC,CAACW,aAAa;MAC1DE,gBAAgB,CAACC,gBAAgB,GAAG1D,WAAW;MAC/CyD,gBAAgB,CAACE,0BAA0B,GACvC1D,mBAAmB,IAAI,MAAM;MACjCwD,gBAAgB,CAAC7E,sBAAsB,GAAGA,sBAAsB;MAChE6E,gBAAgB,CAACG,eAAe,GAAG,WAAW;MAC9CH,gBAAgB,CAACI,aAAa,GAAG,GAAG;IACxC;EACJ;EACA;EACA9E,YAAY,CAAC+E,kBAAkB,CAAC,iBAAiB,EAAE9D,WAAW,EAAEkD,SAAS,CAAC;EAC1EnE,YAAY,CAAC+E,kBAAkB,CAAC,iBAAiB,EAAE9D,WAAW,CAAC;AACnE,CAAC;AACD,MAAMkC,kBAAkB,GAAI6B,OAAO,IAAK;EACpC,MAAMC,uBAAuB,GAAG,8BAA8B;EAC9D,MAAMC,iBAAiB,GAAG,wBAAwB;EAClD,IAAIC,eAAe,GAAG5C,8BAAc,CAAC6C,QAAQ,CAACJ,OAAO,CAAC9B,mBAAmB,CAAC;EAC1E,IAAI8B,OAAO,CAACtD,aAAa,EAAE;IACvByD,eAAe,GAAG,IAAAE,iCAAkB,EAACF,eAAe,EAAED,iBAAiB,EAAEF,OAAO,CAACtD,aAAa,CAAC;EACnG;EACA,IAAIsD,OAAO,CAAChE,kBAAkB,EAAE;IAC5BmE,eAAe,GAAG,IAAAE,iCAAkB,EAACF,eAAe,EAAEF,uBAAuB,EAAED,OAAO,CAAChE,kBAAkB,CAAC;EAC9G;EACAuB,8BAAc,CAAC+C,SAAS,CAACN,OAAO,CAAC9B,mBAAmB,EAAEiC,eAAe,CAAC;AAC1E,CAAC;AACD,MAAM/B,YAAY,GAAGA,CAACrD,OAAO,EAAEwF,WAAW,KAAK;EAAA,IAAAC,sBAAA;EAC3C,MAAMC,cAAc,GAAG,qBAAqB;EAC5C,MAAMC,SAAS,GAAG,gBAAgB;EAClC,IAAIC,cAAc,GAAGpD,8BAAc,CAAC6C,QAAQ,CAACG,WAAW,CAAC;EACzD,MAAM;IAAEK,SAAS;IAAEC;EAAO,CAAC,GAAG,EAAAL,sBAAA,GAAAzF,OAAO,CAACG,gBAAgB,cAAAsF,sBAAA,uBAAxBA,sBAAA,CAA0BM,GAAG,KAAI;IAC3DF,SAAS,EAAExE,SAAS;IACpByE,MAAM,EAAEzE;EACZ,CAAC;EACD,IAAI,CAACwE,SAAS,EAAE;IACZ,MAAM,IAAIvE,KAAK,CAAC,2HAA2H,CAAC;EAChJ;EACAsE,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAEF,cAAc,EAAEG,SAAS,CAAC;EAC9E,IAAIC,MAAM,EAAE;IACR,MAAME,SAAS,GAAG;MACdC,EAAE,EAAE,WAAW;MACfC,EAAE,EAAE;IACR,CAAC;IACD,MAAMC,YAAY,GAAGH,SAAS,CAACF,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;IAC1D,IAAI,CAACD,YAAY,EAAE;MACf3F,OAAO,CAAC8B,IAAI,CAAC,GAAGwD,MAAM,qIAAqI,CAAC;IAChK,CAAC,MACI;MACDF,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAED,SAAS,EAAEQ,YAAY,CAAC;IAChF;EACJ;EACA3D,8BAAc,CAAC+C,SAAS,CAACC,WAAW,EAAEI,cAAc,CAAC;AACzD,CAAC;AACD,eAAexF,uBAAuBA,CAACJ,OAAO,EAAEC,YAAY,EAAE;EAC1D;EACA,MAAM;IAAE4B,OAAO;IAAEC;EAAQ,CAAC,GAAG9B,OAAO;EACpC,MAAMkC,aAAa,GAAG,IAAAC,wBAAiB,EAACnC,OAAO,CAAC;EAChD;EACA,MAAMqG,UAAU,GAAG,GAAGnE,aAAa,GAAG,KAAK,GAAG,KAAK,oBAAoB;EACvE,MAAMoE,cAAc,GAAG,mBAAmB;EAC1C,MAAMC,OAAO,GAAG,GAAG1E,OAAO,IAAIC,OAAO,EAAE;EACvC,MAAMe,aAAa,GAAIC,QAAQ,IAAK,GAAGyD,OAAO,IAAIzD,QAAQ,EAAE;EAC5D,MAAME,UAAU,GAAGH,aAAa,CAACyD,cAAc,CAAC;EAChD;EACA;EACA,IAAI,CAAC9D,8BAAc,CAACgE,MAAM,CAAC3D,aAAa,CAACyD,cAAc,CAAC,CAAC,EAAE;IACvD9D,8BAAc,CAACC,KAAK,CAAC8D,OAAO,EAAE;MAC1B7D,SAAS,EAAE;IACf,CAAC,CAAC;IACFF,8BAAc,CAACS,QAAQ,CAAC,GAAGC,gCAA2B,IAAImD,UAAU,EAAE,EAAErD,UAAU,CAAC;EACvF,CAAC,MACI;IACDxC,OAAO,CAACiG,GAAG,CAAC,GAAG5D,aAAa,CAACyD,cAAc,CAAC,8BAA8B,CAAC;IAC3E;EACJ;EACAI,cAAc,CAAC1G,OAAO,EAAEgD,UAAU,CAAC;EACnC,MAAM2D,KAAK,GAAG1G,YAAY,CAAC2G,cAAc,CAAC,yBAAyB,CAAC;EACpE,MAAMC,UAAU,GAAG5G,YAAY,CAAC6G,eAAe,CAAC;IAAE/C,IAAI,EAAE,GAAGjC,OAAO;EAAG,CAAC,CAAC;EACvE7B,YAAY,CAACgE,aAAa,CAAC0C,KAAK,EAAEE,UAAU,CAAC;EAC7C5G,YAAY,CAAC8G,aAAa,CAAC,GAAGjF,OAAO,IAAIwE,cAAc,EAAE,EAAE,IAAI,EAAEK,KAAK,CAAC;AAC3E;AACA,MAAMD,cAAc,GAAGA,CAAC1G,OAAO,EAAEwF,WAAW,KAAK;EAAA,IAAAwB,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAC7C,MAAMC,WAAW,GAAG,0BAA0B;EAC9C,IAAIzB,cAAc,GAAGpD,8BAAc,CAAC6C,QAAQ,CAACG,WAAW,CAAC;EACzD,MAAM8B,+BAA+B,IAAAN,sBAAA,GAAGhH,OAAO,CAACG,gBAAgB,cAAA6G,sBAAA,uBAAxBA,sBAAA,CAA0BM,+BAA+B;EACjG,MAAM;IAAEzB,SAAS;IAAEC;EAAO,CAAC,GAAG,EAAAmB,sBAAA,GAAAjH,OAAO,CAACG,gBAAgB,cAAA8G,sBAAA,uBAAxBA,sBAAA,CAA0BlB,GAAG,KAAI;IAC3DF,SAAS,EAAExE,SAAS;IACpByE,MAAM,EAAEzE;EACZ,CAAC;EACD,IAAI,CAACwE,SAAS,EAAE;IACZ,MAAM,IAAIvE,KAAK,CAAC,2HAA2H,CAAC;EAChJ;EACA,IAAIiG,OAAO,GAAG,EAAE;EAChB;EACA;EACA,IAAID,+BAA+B,KAAK,IAAI,EAAE;IAC1CC,OAAO,GAAGC,0CAAqC;EACnD;EACA5B,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAEyB,WAAW,EAAEE,OAAO,CAAC;EACzE3B,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAE,qBAAqB,EAAEC,SAAS,CAAC;EACrF,IAAIC,MAAM,EAAE;IACRF,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAE,gBAAgB,EAAEE,MAAM,CAAC2B,WAAW,CAAC,CAAC,CAAC;EAC/F;EACA,MAAMC,mBAAmB,GAAG,EAAAR,sBAAA,GAAAlH,OAAO,CAACG,gBAAgB,cAAA+G,sBAAA,uBAAxBA,sBAAA,CAA0BQ,mBAAmB,MAAK,KAAK;EACnF9B,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAE,gCAAgC,EAAE8B,mBAAmB,CAACC,QAAQ,CAAC,CAAC,CAAC;EACrH,MAAMC,oBAAoB,GAAG,EAAAT,sBAAA,GAAAnH,OAAO,CAACG,gBAAgB,cAAAgH,sBAAA,uBAAxBA,sBAAA,CAA0BS,oBAAoB,MAAK,KAAK;EACrFhC,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAE,iCAAiC,EAAEgC,oBAAoB,CAACD,QAAQ,CAAC,CAAC,CAAC;EACvH,MAAME,uBAAuB,GAAG,EAAAT,sBAAA,GAAApH,OAAO,CAACG,gBAAgB,cAAAiH,sBAAA,uBAAxBA,sBAAA,CAA0BS,uBAAuB,MAAK,KAAK;EAC3FjC,cAAc,GAAG,IAAAN,iCAAkB,EAACM,cAAc,EAAE,qCAAqC,EAAEiC,uBAAuB,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC9HnF,8BAAc,CAAC+C,SAAS,CAACC,WAAW,EAAEI,cAAc,CAAC;AACzD,CAAC","ignoreList":[]}