{"version":3,"names":["finder","require","path","resolveFrom","f","__dirname","pluginPackageRoot","next","filename","dirname","LOCAL_PATH_TO_CIO_NSE_FILES","exports","join","getRelativePathToRNSDK","iosPath","rootAppPath","pluginPackageJsonPath","silent","relative","IOS_DEPLOYMENT_TARGET","GROUP_IDENTIFIER_TEMPLATE_REGEX","BUNDLE_SHORT_VERSION_TEMPLATE_REGEX","BUNDLE_VERSION_TEMPLATE_REGEX","CIO_DIDFINISHLAUNCHINGMETHOD_REGEX","CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERROR_REGEX","CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERRORFULL_REGEX","CIO_DIDREGISTERFORREMOTENOTIFICATIONSWITHDEVICETOKEN_REGEX","CIO_APPDELEGATEDECLARATION_REGEX","CIO_APPDELEGATEHEADER_REGEX","CIO_RCTBRIDGE_DEEPLINK_MODIFIEDOPTIONS_REGEX","CIO_LAUNCHOPTIONS_DEEPLINK_MODIFIEDOPTIONS_REGEX","CIO_DEEPLINK_COMMENT_REGEX","DEFAULT_BUNDLE_VERSION","DEFAULT_BUNDLE_SHORT_VERSION","CIO_TARGET_NAME","CIO_NOTIFICATION_TARGET_NAME","CIO_APPDELEGATEHEADER_IMPORT_SNIPPET","CIO_APPDELEGATEHEADER_USER_NOTIFICATION_CENTER_SNIPPET","CIO_PUSHNOTIFICATIONHANDLERDECLARATION_SNIPPET","CIO_RCTBRIDGE_DEEPLINK_MODIFIEDOPTIONS_SNIPPET","CIO_LAUNCHOPTIONS_MODIFIEDOPTIONS_SNIPPET","CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERROR_SNIPPET","CIO_DIDREGISTERFORREMOTENOTIFICATIONSWITHDEVICETOKEN_SNIPPET","CIO_CONFIGURECIOSDKPUSHNOTIFICATION_SNIPPET","CIO_INITIALIZECIOSDK_SNIPPET","CIO_CONFIGUREDEEPLINK_KILLEDSTATE_SNIPPET","CIO_REGISTER_PUSHNOTIFICATION_SNIPPET","CIO_APP_PUSH_NOTIFICATIONS_HANDLER_REGEX","CIO_APP_PUSH_NOTIFICATIONS_HANDLER_SNIPPET","CIO_INITIALIZE_SDK_REGEX","CIO_INITIALIZE_SDK_SNIPPET","CIO_OVERRIDE_REMOTE_NOTIFICATION_REGEX","CIO_OVERRIDE_REMOTE_NOTIFICATION_SNIPPET"],"sources":["ios.js"],"sourcesContent":["const finder = require('find-package-json');\nconst path = require('path');\nconst resolveFrom = require('resolve-from');\nconst f = finder(__dirname);\nlet pluginPackageRoot = f.next().filename;\n// This is the path to the root of the customerio-expo-plugin package\npluginPackageRoot = path.dirname(pluginPackageRoot);\nexport const LOCAL_PATH_TO_CIO_NSE_FILES = path.join(pluginPackageRoot, 'plugin/src/helpers/native-files/ios');\nexport function getRelativePathToRNSDK(iosPath) {\n    // Root path of the Expo project\n    const rootAppPath = path.dirname(iosPath);\n    // Path of the cio RN package.json file. Example: test-app/node_modules/customerio-reactnative/package.json\n    const pluginPackageJsonPath = resolveFrom.silent(rootAppPath, `customerio-reactnative/package.json`);\n    // Example: ../node_modules/customerio-reactnative\n    return path.relative(iosPath, path.dirname(pluginPackageJsonPath));\n}\nexport const IOS_DEPLOYMENT_TARGET = '13.0';\nexport const GROUP_IDENTIFIER_TEMPLATE_REGEX = /{{GROUP_IDENTIFIER}}/gm;\nexport const BUNDLE_SHORT_VERSION_TEMPLATE_REGEX = /{{BUNDLE_SHORT_VERSION}}/gm;\nexport const BUNDLE_VERSION_TEMPLATE_REGEX = /{{BUNDLE_VERSION}}/gm;\nexport const CIO_DIDFINISHLAUNCHINGMETHOD_REGEX = /.*\\[super(\\s)application:application(\\s)didFinishLaunchingWithOptions:launchOptions\\];/;\nexport const CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERROR_REGEX = /return \\[super application:application didFailToRegisterForRemoteNotificationsWithError:error\\];/;\nexport const CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERRORFULL_REGEX = /(- \\(void\\)application:\\(UIApplication \\*\\)application didFailToRegisterForRemoteNotificationsWithError:\\(NSError \\*\\)error(\\s|\\n)*?\\{)(.|\\n){2}.*\\n\\}/;\nexport const CIO_DIDREGISTERFORREMOTENOTIFICATIONSWITHDEVICETOKEN_REGEX = /return \\[super application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken\\];/;\nexport const CIO_APPDELEGATEDECLARATION_REGEX = /@implementation AppDelegate(.|\\n)/;\nexport const CIO_APPDELEGATEHEADER_REGEX = /(@interface AppDelegate\\s*:\\s*EXAppDelegateWrapper\\s*)(<([^>]+)>)?/;\nexport const CIO_RCTBRIDGE_DEEPLINK_MODIFIEDOPTIONS_REGEX = /^\\s*RCTBridge\\s*\\*\\s*\\w+\\s*=\\s*\\[\\s*self\\.reactDelegate\\s+createBridgeWithDelegate:self\\s+launchOptions:launchOptions\\s*\\];\\s*$/gm;\nexport const CIO_LAUNCHOPTIONS_DEEPLINK_MODIFIEDOPTIONS_REGEX = /^\\s*return\\s\\[\\s*super\\s*application:\\s*application\\s*didFinishLaunchingWithOptions\\s*:\\s*launchOptions\\s*\\];/gm;\nexport const CIO_DEEPLINK_COMMENT_REGEX = /\\sDeep link workaround for app killed state start/gm;\nexport const DEFAULT_BUNDLE_VERSION = '1';\nexport const DEFAULT_BUNDLE_SHORT_VERSION = '1.0';\nexport const CIO_TARGET_NAME = 'CustomerIOSDK';\nexport const CIO_NOTIFICATION_TARGET_NAME = 'NotificationService';\nexport const CIO_APPDELEGATEHEADER_IMPORT_SNIPPET = `#import <UserNotifications/UserNotifications.h>`;\nexport const CIO_APPDELEGATEHEADER_USER_NOTIFICATION_CENTER_SNIPPET = 'UNUserNotificationCenterDelegate';\nexport const CIO_PUSHNOTIFICATIONHANDLERDECLARATION_SNIPPET = `\nCIOAppPushNotificationsHandler* pnHandlerObj = [[CIOAppPushNotificationsHandler alloc] init];\n`;\nexport const CIO_RCTBRIDGE_DEEPLINK_MODIFIEDOPTIONS_SNIPPET = `\nRCTBridge *bridge = [self.reactDelegate createBridgeWithDelegate:self launchOptions:modifiedLaunchOptions];\n`;\nexport const CIO_LAUNCHOPTIONS_MODIFIEDOPTIONS_SNIPPET = `\nreturn [super application:application didFinishLaunchingWithOptions:modifiedLaunchOptions];`;\nexport const CIO_DIDFAILTOREGISTERFORREMOTENOTIFICATIONSWITHERROR_SNIPPET = `\n  [super application:application didFailToRegisterForRemoteNotificationsWithError:error];\n  [pnHandlerObj application:application error:error];\n`;\nexport const CIO_DIDREGISTERFORREMOTENOTIFICATIONSWITHDEVICETOKEN_SNIPPET = `\n  [super application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n  return [pnHandlerObj application:application deviceToken:deviceToken];\n`;\nexport const CIO_CONFIGURECIOSDKPUSHNOTIFICATION_SNIPPET = `\n  // Register for push notifications\n  [pnHandlerObj registerPushNotification];\n`;\nexport const CIO_INITIALIZECIOSDK_SNIPPET = `  \n  [pnHandlerObj initializeCioSdk];\n\n// Code to make the CIO SDK compatible with expo-notifications package.\n// \n// The CIO SDK and expo-notifications both need to handle when a push gets clicked. However, iOS only allows one click handler to be set per app.\n// To get around this limitation, we set the CIO SDK as the click handler. The CIO SDK sets itself up so that when another SDK or host iOS app \n// sets itself as the click handler, the CIO SDK will still be able to handle when the push gets clicked, even though it's not the designated \n// click handler in iOS at runtime. \n// \n// This should work for most SDKs. However, expo-notifications is unique in it's implementation. It will not setup push click handling it if detects \n// that another SDK or host iOS app has already set itself as the click handler:\n// https://github.com/expo/expo/blob/1b29637bec0b9888e8bc8c310476293a3e2d9786/packages/expo-notifications/ios/EXNotifications/Notifications/EXNotificationCenterDelegate.m#L31-L37\n// ...to get around this, we must manually set it as the click handler after the CIO SDK. That's what this code block does.\n//\n// Note: Initialize the native iOS SDK and setup SDK push click handling before running this code. \n# if __has_include(<EXNotifications/EXNotificationCenterDelegate.h>)\n  // Creating a new instance, as the comments in expo-notifications suggests, does not work. With this code, if you send a CIO push to device and click on it,\n  // no push metrics reporting will occur.\n  // EXNotificationCenterDelegate *notificationCenterDelegate = [[EXNotificationCenterDelegate alloc] init];\n\n  // ...instead, get the singleton reference from Expo. \n  id<UNUserNotificationCenterDelegate> notificationCenterDelegate = (id<UNUserNotificationCenterDelegate>) [EXModuleRegistryProvider getSingletonModuleForClass:[EXNotificationCenterDelegate class]];\n  UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n  center.delegate = notificationCenterDelegate;\n# endif\n`;\nexport const CIO_CONFIGUREDEEPLINK_KILLEDSTATE_SNIPPET = `\n// Deep link workaround for app killed state start\nNSMutableDictionary *modifiedLaunchOptions = [NSMutableDictionary dictionaryWithDictionary:launchOptions];\n  if (launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey]) {\n      NSDictionary *pushContent = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];\n      if (pushContent[@\"CIO\"] && pushContent[@\"CIO\"][@\"push\"] && pushContent[@\"CIO\"][@\"push\"][@\"link\"]) {\n        NSString *initialURL = pushContent[@\"CIO\"][@\"push\"][@\"link\"];\n          if (!launchOptions[UIApplicationLaunchOptionsURLKey]) {\n              modifiedLaunchOptions[UIApplicationLaunchOptionsURLKey] = [NSURL URLWithString:initialURL];\n          }\n      }\n  }\n//Deep link workaround for app killed state ends\n`;\nexport const CIO_REGISTER_PUSHNOTIFICATION_SNIPPET = `\n@objc(registerPushNotification)\n  public func registerPushNotification() {\n\n    let center  = UNUserNotificationCenter.current()\n    center.requestAuthorization(options: [.sound, .alert, .badge]) { (granted, error) in\n      if error == nil{\n        DispatchQueue.main.async {\n          UIApplication.shared.registerForRemoteNotifications()\n        }\n      }\n    }\n  }`;\nexport const CIO_APP_PUSH_NOTIFICATIONS_HANDLER_REGEX = /var reactNativeFactory: RCTReactNativeFactory\\?/;\nexport const CIO_APP_PUSH_NOTIFICATIONS_HANDLER_SNIPPET = 'var pnHandlerObj = CIOAppPushNotificationsHandler()';\nexport const CIO_INITIALIZE_SDK_REGEX = /FirebaseApp\\.configure\\(\\)/;\nexport const CIO_INITIALIZE_SDK_SNIPPET = `\n    pnHandlerObj.registerPushNotification()\n    pnHandlerObj.initializeCioSdk()\n    \n    \n#if canImport(EXNotifications)\n    // Creating a new instance, as the comments in expo-notifications suggest, does not work.\n    // With this code, if you send a CIO push to device and click on it,\n    // no push metrics reporting will occur.\n    // let notificationCenterDelegate = EXNotificationCenterDelegate()\n\n    // …instead, get the singleton reference from Expo.\n    if let notificationCenterDelegate =  Expo.ModuleRegistryProvider\n      .getSingletonModule(for: Expo.UNUserNotificationCenterDelegate.self)\n        as? UNUserNotificationCenterDelegate\n    {\n        let center = UNUserNotificationCenter.current()\n        center.delegate = notificationCenterDelegate\n    }\n#endif`;\nexport const CIO_OVERRIDE_REMOTE_NOTIFICATION_REGEX = /\\/\\/ Universal Links/;\nexport const CIO_OVERRIDE_REMOTE_NOTIFICATION_SNIPPET = `\n  public override func application(_ application: UIApplication,\n                            didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n      super.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\n    pnHandlerObj.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\n  }\n \n  public override func application(_ application: UIApplication,\n                            didFailToRegisterForRemoteNotificationsWithError error: Error) {\n      super.application(application, didFailToRegisterForRemoteNotificationsWithError: error)\n    pnHandlerObj.application(application, didFailToRegisterForRemoteNotificationsWithError: error)\n  }\n  \n  // Explicitly define remote notification delegates to ensure compatibility with some third-party libraries\n  public override func application(_ application: UIApplication,\n                            didReceiveRemoteNotification userInfo: [AnyHashable: Any],\n                            fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n      super.application(application,\n                        didReceiveRemoteNotification: userInfo,\n                        fetchCompletionHandler: completionHandler)\n  }`;\n"],"mappings":"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","ignoreList":[]}